datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["filterJson"]
}

model Customer {
    id               String       @id @default(cuid())
    last_name        String
    first_name       String
    email            String       @unique
    password         String
    email_confirm    Boolean      @default(false)
    is_delete        Boolean      @default(false)
    phone_number     String       @unique
    last_login       String?
    payment_type     Payment_type @default(Cash)
    customer_card    Card[]
    customer_address Address[]

    @@map(name: "customer")
}

enum Payment_type {
    Card
    Paypal
    Cash
}

model Card {
    id          String   @id @default(cuid())
    card_number Int      @unique
    expiry_date DateTime
    cvv         Int
    customer    Customer @relation(fields: [customer_id], references: [id])
    customer_id String

    @@map(name: "cards")
}

model Address {
    id          String   @id @default(cuid())
    number      Int
    street      String
    city        String
    state       String
    customer    Customer @relation(fields: [customer_id], references: [id])
    customer_id String

    @@map(name: "addresses")
}

model Dispatcher {
    id           String     @id @default(cuid())
    first_name   String
    last_name    String
    phone_number String     @unique
    email        String     @unique
    password     String
    address      String
    is_available Boolean    @default(false)
    locations    Location[]

    @@map(name: "dispatcher")
}

model Location {
    id            String     @id @default(cuid())
    street        String
    city          String
    state         String
    dispatcher    Dispatcher @relation(fields: [dispatcher_id], references: [id])
    dispatcher_id String

    @@map(name: "locations")
}

model Order {
    id           String      @id @default(cuid())
    cart_id      Cart[]
    total_amount Int
    created_at   DateTime    @default(now())
    status       Status_type @default(pending)

    @@map(name: "order")
}

enum Status_type {
    pending
    in_progress
    delivered
}

// add to cart
model Order_details {
    id              String @id @default(cuid())
    product_details String
    color           String
    sub_total       String
    order_id        String
    customer_id     String
    product_id      String

    @@map(name: "order_items")
}

model Product {
    id         String     @id @default(cuid())
    name       String
    desc       String
    price      String
    is_delete  Boolean    @default(false)
    created_at DateTime   @default(now())
    cart       Cart[]
    categories Category[]

    @@map(name: "product")
}

model Category {
    id            String    @id @default(cuid())
    category_name String
    sku           String
    products      Product[]

    @@map(name: "category")
}

model Cart {
    id         String  @id @default(cuid())
    products   Product @relation(fields: [product_id], references: [id])
    product_id String
    order      Order   @relation(fields: [order_id], references: [id])
    order_id   String

    @@map("cart")
}
